import{r as p,o as t,c as o,a as n,b as e,F as c,d as s,e as l}from"./app.a770902d.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const r={},k=n("h1",{id:"subprocess",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#subprocess","aria-hidden":"true"},"#"),s(" subprocess")],-1),i=s("subprocess \u6A21\u5757\u5141\u8BB8\u6211\u4EEC\u542F\u52A8\u4E00\u4E2A\u65B0\u8FDB\u7A0B\uFF0C\u5E76\u8FDE\u63A5\u5230\u5B83\u4EEC\u7684\u8F93\u5165/\u8F93\u51FA/\u9519\u8BEF\u7BA1\u9053\uFF0C\u4ECE\u800C\u83B7\u53D6\u8FD4\u56DE\u503C\u3002 Python3\u5B98\u65B9\u6587\u6863\uFF1A"),d={href:"https://docs.python.org/zh-cn/3/library/subprocess.html",target:"_blank",rel:"noopener noreferrer"},m=s("https://docs.python.org/zh-cn/3/library/subprocess.html"),g=l(`<p>subprocess \u6A21\u5757\u9996\u5148\u63A8\u8350\u4F7F\u7528\u7684\u662F\u5B83\u7684<code>run</code>\u65B9\u6CD5\uFF0C\u66F4\u9AD8\u7EA7\u7684\u7528\u6CD5\u53EF\u4EE5\u76F4\u63A5\u4F7F\u7528 <code>Popen</code> \u63A5\u53E3\u3002</p><h2 id="run-\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#run-\u65B9\u6CD5" aria-hidden="true">#</a> run()\u65B9\u6CD5</h2><div class="language-python ext-py"><pre class="language-python"><code>subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> capture_output<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> cwd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> check<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> text<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> env<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> universal_newlines<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre></div><ul><li>args\uFF1A\u88AB\u7528\u4F5C\u542F\u52A8\u8FDB\u7A0B\u7684\u53C2\u6570. \u53EF\u80FD\u662F\u4E00\u4E2A\u5217\u8868\u6216\u5B57\u7B26\u4E32\u3002</li><li>stdin\u3001stdout \u548C stderr\uFF1A\u5B50\u8FDB\u7A0B\u7684\u6807\u51C6\u8F93\u5165\u3001\u8F93\u51FA\u548C\u9519\u8BEF\u3002\u5176\u503C\u53EF\u4EE5\u662F subprocess.PIPE\u3001subprocess.DEVNULL\u3001\u4E00\u4E2A\u5DF2\u7ECF\u5B58\u5728\u7684\u6587\u4EF6\u63CF\u8FF0\u7B26\u3001\u5DF2\u7ECF\u6253\u5F00\u7684\u6587\u4EF6\u5BF9\u8C61\u6216\u8005 None\u3002subprocess.PIPE \u8868\u793A\u4E3A\u5B50\u8FDB\u7A0B\u521B\u5EFA\u65B0\u7684\u7BA1\u9053\u3002subprocess.DEVNULL \u8868\u793A\u4F7F\u7528 os.devnull\u3002\u9ED8\u8BA4\u4F7F\u7528\u7684\u662F None\uFF0C\u8868\u793A\u4EC0\u4E48\u90FD\u4E0D\u505A\u3002\u53E6\u5916\uFF0Cstderr \u53EF\u4EE5\u5408\u5E76\u5230 stdout \u91CC\u4E00\u8D77\u8F93\u51FA\u3002</li><li>timeout\uFF1A\u8BBE\u7F6E\u547D\u4EE4\u8D85\u65F6\u65F6\u95F4\u3002\u5982\u679C\u547D\u4EE4\u6267\u884C\u65F6\u95F4\u8D85\u65F6\uFF0C\u5B50\u8FDB\u7A0B\u5C06\u88AB\u6740\u6B7B\uFF0C\u5E76\u5F39\u51FA TimeoutExpired \u5F02\u5E38\u3002</li><li>check\uFF1A\u5982\u679C\u8BE5\u53C2\u6570\u8BBE\u7F6E\u4E3A True\uFF0C\u5E76\u4E14\u8FDB\u7A0B\u9000\u51FA\u72B6\u6001\u7801\u4E0D\u662F 0\uFF0C\u5219\u5F39 \u51FA CalledProcessError \u5F02\u5E38\u3002</li><li>encoding: \u5982\u679C\u6307\u5B9A\u4E86\u8BE5\u53C2\u6570\uFF0C\u5219 stdin\u3001stdout \u548C stderr \u53EF\u4EE5\u63A5\u6536\u5B57\u7B26\u4E32\u6570\u636E\uFF0C\u5E76\u4EE5\u8BE5\u7F16\u7801\u65B9\u5F0F\u7F16\u7801\u3002\u5426\u5219\u53EA\u63A5\u6536 bytes \u7C7B\u578B\u7684\u6570\u636E\u3002</li><li>shell\uFF1A\u5982\u679C\u8BE5\u53C2\u6570\u4E3A True\uFF0C\u5C06\u901A\u8FC7\u64CD\u4F5C\u7CFB\u7EDF\u7684 shell \u6267\u884C\u6307\u5B9A\u7684\u547D\u4EE4\u3002</li></ul><p>run \u65B9\u6CD5\u8C03\u7528\u65B9\u5F0F\u8FD4\u56DE CompletedProcess \u5B9E\u4F8B\uFF0C\u548C\u76F4\u63A5 Popen \u5DEE\u4E0D\u591A\uFF0C\u5B9E\u73B0\u662F\u4E00\u6837\u7684\uFF0C\u5B9E\u9645\u4E5F\u662F\u8C03\u7528 Popen\uFF0C\u4E0E Popen \u6784\u9020\u51FD\u6570\u5927\u81F4\u76F8\u540C\uFF0C\u4F8B\u5982:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token comment">#\u6267\u884Cls -l /dev/null \u547D\u4EE4</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;ls&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;-l&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;/dev/null&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
crw<span class="token operator">-</span>rw<span class="token operator">-</span>rw<span class="token operator">-</span>  <span class="token number">1</span> root  wheel    <span class="token number">3</span><span class="token punctuation">,</span>   <span class="token number">2</span>  <span class="token number">5</span>  <span class="token number">4</span> <span class="token number">13</span><span class="token punctuation">:</span><span class="token number">34</span> <span class="token operator">/</span>dev<span class="token operator">/</span>null
CompletedProcess<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-l&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/dev/null&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> returncode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
</code></pre></div><p>returncode: \u6267\u884C\u5B8C\u5B50\u8FDB\u7A0B\u72B6\u6001\uFF0C\u901A\u5E38\u8FD4\u56DE\u72B6\u6001\u4E3A0\u5219\u8868\u660E\u5B83\u5DF2\u7ECF\u8FD0\u884C\u5B8C\u6BD5\uFF0C\u82E5\u503C\u4E3A\u8D1F\u503C &quot;-N&quot;,\u8868\u660E\u5B50\u8FDB\u7A0B\u88AB\u7EC8\u3002</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> subprocess
<span class="token keyword">def</span> <span class="token function">runcmd</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span>
    ret <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>command<span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">,</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> ret<span class="token punctuation">.</span>returncode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;success:&quot;</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;error:&quot;</span><span class="token punctuation">,</span>ret<span class="token punctuation">)</span>


runcmd<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;dir&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#\u5E8F\u5217\u53C2\u6570</span>
runcmd<span class="token punctuation">(</span><span class="token string">&quot;exit 1&quot;</span><span class="token punctuation">)</span><span class="token comment">#\u5B57\u7B26\u4E32\u53C2\u6570</span>
</code></pre></div><p>\u8F93\u51FA\u7ED3\u679C\u5982\u4E0B\uFF1A</p><div class="language-python ext-py"><pre class="language-python"><code>success<span class="token punctuation">:</span> CompletedProcess<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;dir&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/b&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> returncode<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span><span class="token string">&#39;test.py\\n&#39;</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
error<span class="token punctuation">:</span> CompletedProcess<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token string">&#39;exit 1&#39;</span><span class="token punctuation">,</span> returncode<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="popen-\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#popen-\u65B9\u6CD5" aria-hidden="true">#</a> Popen() \u65B9\u6CD5</h2><p>Popen \u662F subprocess\u7684\u6838\u5FC3\uFF0C\u5B50\u8FDB\u7A0B\u7684\u521B\u5EFA\u548C\u7BA1\u7406\u90FD\u9760\u5B83\u5904\u7406\u3002</p><p>\u6784\u9020\u51FD\u6570\uFF1A</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">subprocess</span><span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>args<span class="token punctuation">,</span> bufsize<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> executable<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> stderr<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> 
preexec_fn<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> close_fds<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> cwd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> env<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> universal_newlines<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> 
startupinfo<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> creationflags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>restore_signals<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> start_new_session<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> pass_fds<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token operator">*</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> errors<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span>
</code></pre></div><p>\u5E38\u7528\u53C2\u6570\uFF1A</p><ul><li>args\uFF1Ashell\u547D\u4EE4\uFF0C\u53EF\u4EE5\u662F\u5B57\u7B26\u4E32\u6216\u8005\u5E8F\u5217\u7C7B\u578B\uFF08\u5982\uFF1Alist\uFF0C\u5143\u7EC4\uFF09</li><li>bufsize\uFF1A\u7F13\u51B2\u533A\u5927\u5C0F\u3002\u5F53\u521B\u5EFA\u6807\u51C6\u6D41\u7684\u7BA1\u9053\u5BF9\u8C61\u65F6\u4F7F\u7528\uFF0C\u9ED8\u8BA4-1\u3002 0\uFF1A\u4E0D\u4F7F\u7528\u7F13\u51B2\u533A 1\uFF1A\u8868\u793A\u884C\u7F13\u51B2\uFF0C\u4EC5\u5F53universal_newlines=True\u65F6\u53EF\u7528\uFF0C\u4E5F\u5C31\u662F\u6587\u672C\u6A21\u5F0F \u6B63\u6570\uFF1A\u8868\u793A\u7F13\u51B2\u533A\u5927\u5C0F \u8D1F\u6570\uFF1A\u8868\u793A\u4F7F\u7528\u7CFB\u7EDF\u9ED8\u8BA4\u7684\u7F13\u51B2\u533A\u5927\u5C0F\u3002</li><li>stdin, stdout, stderr\uFF1A\u5206\u522B\u8868\u793A\u7A0B\u5E8F\u7684\u6807\u51C6\u8F93\u5165\u3001\u8F93\u51FA\u3001\u9519\u8BEF\u53E5\u67C4</li><li>preexec_fn\uFF1A\u53EA\u5728 Unix \u5E73\u53F0\u4E0B\u6709\u6548\uFF0C\u7528\u4E8E\u6307\u5B9A\u4E00\u4E2A\u53EF\u6267\u884C\u5BF9\u8C61\uFF08callable object\uFF09\uFF0C\u5B83\u5C06\u5728\u5B50\u8FDB\u7A0B\u8FD0\u884C\u4E4B\u524D\u88AB\u8C03\u7528</li><li>shell\uFF1A\u5982\u679C\u8BE5\u53C2\u6570\u4E3A True\uFF0C\u5C06\u901A\u8FC7\u64CD\u4F5C\u7CFB\u7EDF\u7684 shell \u6267\u884C\u6307\u5B9A\u7684\u547D\u4EE4\u3002</li><li>cwd\uFF1A\u7528\u4E8E\u8BBE\u7F6E\u5B50\u8FDB\u7A0B\u7684\u5F53\u524D\u76EE\u5F55\u3002</li><li>env\uFF1A\u7528\u4E8E\u6307\u5B9A\u5B50\u8FDB\u7A0B\u7684\u73AF\u5883\u53D8\u91CF\u3002\u5982\u679C env = None\uFF0C\u5B50\u8FDB\u7A0B\u7684\u73AF\u5883\u53D8\u91CF\u5C06\u4ECE\u7236\u8FDB\u7A0B\u4E2D\u7EE7\u627F\u3002</li></ul><p>\u521B\u5EFA\u4E00\u4E2A\u5B50\u8FDB\u7A0B\uFF0C\u7136\u540E\u6267\u884C\u4E00\u4E2A\u7B80\u5355\u7684\u547D\u4EE4:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> <span class="token keyword">import</span> subprocess
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token string">&#39;ls -l&#39;</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> total <span class="token number">164</span>
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>  <span class="token number">1</span> root root   <span class="token number">133</span> Jul  <span class="token number">4</span> <span class="token number">16</span><span class="token punctuation">:</span><span class="token number">25</span> admin<span class="token operator">-</span>openrc<span class="token punctuation">.</span>sh
<span class="token operator">-</span>rw<span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>r<span class="token operator">-</span><span class="token operator">-</span>  <span class="token number">1</span> root root   <span class="token number">268</span> Jul <span class="token number">10</span> <span class="token number">15</span><span class="token punctuation">:</span><span class="token number">55</span> admin<span class="token operator">-</span>openrc<span class="token operator">-</span>v3<span class="token punctuation">.</span>sh
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p<span class="token punctuation">.</span>returncode
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">0</span>
<span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> p<span class="token punctuation">.</span>returncode
</code></pre></div><h3 id="popen-\u5BF9\u8C61\u65B9\u6CD5" tabindex="-1"><a class="header-anchor" href="#popen-\u5BF9\u8C61\u65B9\u6CD5" aria-hidden="true">#</a> Popen \u5BF9\u8C61\u65B9\u6CD5</h3><ul><li>poll(): \u68C0\u67E5\u8FDB\u7A0B\u662F\u5426\u7EC8\u6B62\uFF0C\u5982\u679C\u7EC8\u6B62\u8FD4\u56DE returncode\uFF0C\u5426\u5219\u8FD4\u56DE None\u3002</li><li>wait(timeout): \u7B49\u5F85\u5B50\u8FDB\u7A0B\u7EC8\u6B62\u3002</li><li>communicate(input,timeout): \u548C\u5B50\u8FDB\u7A0B\u4EA4\u4E92\uFF0C\u53D1\u9001\u548C\u8BFB\u53D6\u6570\u636E\u3002</li><li>send_signal(singnal): \u53D1\u9001\u4FE1\u53F7\u5230\u5B50\u8FDB\u7A0B \u3002</li><li>terminate(): \u505C\u6B62\u5B50\u8FDB\u7A0B,\u4E5F\u5C31\u662F\u53D1\u9001SIGTERM\u4FE1\u53F7\u5230\u5B50\u8FDB\u7A0B\u3002</li><li>kill(): \u6740\u6B7B\u5B50\u8FDB\u7A0B\u3002\u53D1\u9001 SIGKILL \u4FE1\u53F7\u5230\u5B50\u8FDB\u7A0B\u3002</li></ul><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">import</span> subprocess

<span class="token keyword">def</span> <span class="token function">cmd</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span>
    subp <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>command<span class="token punctuation">,</span>shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>
    subp<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> subp<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>subp<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\u5931\u8D25&quot;</span><span class="token punctuation">)</span>

cmd<span class="token punctuation">(</span><span class="token string">&quot;java -version&quot;</span><span class="token punctuation">)</span>
cmd<span class="token punctuation">(</span><span class="token string">&quot;exit 1&quot;</span><span class="token punctuation">)</span>
</code></pre></div><p>\u8F93\u51FA\u7ED3\u679C\u5982\u4E0B\uFF1A</p><div class="language-python ext-py"><pre class="language-python"><code>java version <span class="token string">&quot;1.8.0_31&quot;</span>
Java<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> SE Runtime Environment <span class="token punctuation">(</span>build <span class="token number">1.8</span><span class="token number">.0_31</span><span class="token operator">-</span>b13<span class="token punctuation">)</span>
Java HotSpot<span class="token punctuation">(</span>TM<span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span>Bit Server VM <span class="token punctuation">(</span>build <span class="token number">25.31</span><span class="token operator">-</span>b07<span class="token punctuation">,</span> mixed mode<span class="token punctuation">)</span>

\u5931\u8D25
</code></pre></div><h2 id="\u793A\u4F8B" tabindex="-1"><a class="header-anchor" href="#\u793A\u4F8B" aria-hidden="true">#</a> \u793A\u4F8B</h2><ul><li>ping:</li></ul><div class="language-python ext-py"><pre class="language-python"><code><span class="token comment"># \u9700\u8981\u5BFC\u5165\u6A21\u5757: import subprocess [as \u522B\u540D]</span>
<span class="token comment"># \u6216\u8005: from subprocess import run [as \u522B\u540D]</span>
<span class="token keyword">def</span> <span class="token function">ping</span><span class="token punctuation">(</span>ns_name<span class="token punctuation">,</span> source_lo_addr<span class="token punctuation">,</span> dest_lo_addr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;ip&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;netns&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;exec&#39;</span><span class="token punctuation">,</span> ns_name<span class="token punctuation">,</span> <span class="token string">&#39;ping&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-f&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;-W1&#39;</span><span class="token punctuation">,</span>
                                 <span class="token string">&#39;-c{}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>PING_PACKTES<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                 <span class="token string">&#39;-I&#39;</span><span class="token punctuation">,</span> source_lo_addr<span class="token punctuation">,</span> dest_lo_addr<span class="token punctuation">]</span><span class="token punctuation">,</span>
                                stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>
    <span class="token keyword">except</span> FileNotFoundError<span class="token punctuation">:</span>
        fatal_error<span class="token punctuation">(</span><span class="token string">&#39;&quot;ping&quot; command not found&#39;</span><span class="token punctuation">)</span>
    output <span class="token operator">=</span> result<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&#39;ascii&#39;</span><span class="token punctuation">)</span>
    lines <span class="token operator">=</span> output<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">&quot;packets transmitted&quot;</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>
            split_line <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>
            packets_transmitted <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>split_line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            packets_received <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>split_line<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>packets_transmitted<span class="token punctuation">,</span> packets_received<span class="token punctuation">)</span>
    fatal_error<span class="token punctuation">(</span><span class="token string">&#39;Could not determine ping statistics for namespace &quot;{}&quot;&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ns_name<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token boolean">None</span>  <span class="token comment"># Never reached</span>
</code></pre></div><ul><li>popen:</li></ul><div class="language-python ext-py"><pre class="language-python"><code><span class="token comment"># \u9700\u8981\u5BFC\u5165\u6A21\u5757: import subprocess [as \u522B\u540D]</span>
<span class="token comment"># \u6216\u8005: from subprocess import Popen [as \u522B\u540D]</span>
<span class="token keyword">def</span> <span class="token function">popen</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> cwd<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> raises<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token triple-quoted-string string">&#39;&#39;&#39;
            Execute the given command string in a new process. Send data to stdin and
        read data from stdout and stderr, until end-of-file is reached.

        :param cls     : The class as implicit first argument.
        :param cwd     : If it is set, then the child&#39;s current directory will be change
                         to \`cwd\` before it is executed.
        :param raises  : If \`\`True\`\` and stderr has data, it raises an \`\`OSError\`\` exception.
        :returns       : The output of the given command; pair of (stdout, stderr).
        :rtype         : \`\`tuple\`\`
        :raises OSError: If \`raises\` and stderr has data.
        &#39;&#39;&#39;</span>
        parser   <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">&#39;&#39;</span> <span class="token keyword">else</span> <span class="token punctuation">[</span>y<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        process  <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> universal_newlines<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
                    stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>
        out<span class="token punctuation">,</span> err <span class="token operator">=</span> process<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>

        <span class="token comment"># .............................trim lines and remove the empty ones</span>
        _stdout  <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> parser<span class="token punctuation">(</span>out<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span>
        _stderr  <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> parser<span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token builtin">bool</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">]</span>

        <span class="token keyword">if</span> _stderr <span class="token keyword">and</span> raises<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> OSError<span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>_stderr<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> _stdout<span class="token punctuation">,</span> _stderr
</code></pre></div><ul><li>runcmd:</li></ul><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> subprocess

<span class="token triple-quoted-string string">&#39;&#39;&#39;
Runs a command, waits for it to complete, then returns a CompletedProcess instance.
&#39;&#39;&#39;</span>

<span class="token keyword">def</span> <span class="token function">runcmd</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span>cwd<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ret <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>
        args<span class="token operator">=</span>args<span class="token punctuation">,</span>
        cwd<span class="token operator">=</span>cwd<span class="token punctuation">,</span>
        shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
        stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>
        stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>
        encoding<span class="token operator">=</span><span class="token string">&#39;gbk&#39;</span><span class="token punctuation">,</span>
        timeout<span class="token operator">=</span><span class="token number">1</span>
    <span class="token punctuation">)</span>
    <span class="token keyword">if</span> ret<span class="token punctuation">.</span>returncode <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;success:&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">.</span>stdout<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;error:&quot;</span><span class="token punctuation">,</span> ret<span class="token punctuation">.</span>stderr<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    runcmd<span class="token punctuation">(</span>args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&quot;dir&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>cwd<span class="token operator">=</span><span class="token string">r&#39;F:\\test&#39;</span><span class="token punctuation">)</span>

Result<span class="token punctuation">:</span>
<span class="token comment"># success:  \u9A71\u52A8\u5668 F \u4E2D\u7684\u5377\u662F \u6570\u636E</span>
<span class="token comment">#  \u5377\u7684\u5E8F\u5217\u53F7\u662F DCBE-C50C</span>

<span class="token comment">#  F:\\test \u7684\u76EE\u5F55</span>

<span class="token comment"># 2021/12/27  19:01    &lt;DIR&gt;          .</span>
<span class="token comment"># 2021/12/27  19:01    &lt;DIR&gt;          ..</span>
<span class="token comment"># 2021/08/26  22:25            15,593 AutoComplete.cs</span>
<span class="token comment"># 2021/08/26  22:25               706 ColorRandom.cs</span>
<span class="token comment"># 2021/08/26  22:25             6,146 DataGridViewRender.cs</span>
<span class="token comment"># 2021/08/26  22:25             2,840 ExcelDataReader.cs</span>
<span class="token comment"># 2021/08/26  22:25            28,050 FTPClient.cs</span>
<span class="token comment"># 2021/08/26  22:25               404 GUID.cs</span>
<span class="token comment"># 2021/08/26  22:25               927 ListItem.cs</span>
<span class="token comment"># 2021/08/26  22:25             1,360 LoadXml.cs</span>
<span class="token comment"># 2021/08/26  22:25            35,700 ManageDB.cs</span>
<span class="token comment"># 2021/08/26  22:25               428 RadomNamed.cs</span>
<span class="token comment"># 2021/08/26  22:25             7,380 RegexInfo.cs</span>
<span class="token comment"># 2021/08/26  22:25             4,111 SendMail.cs</span>
<span class="token comment"># 2021/08/26  22:25             4,250 TextAndImageColumn.cs</span>
<span class="token comment"># 2021/08/26  22:25             1,944 TimeDelay.cs</span>
<span class="token comment">#               14 \u4E2A\u6587\u4EF6        109,839 \u5B57\u8282</span>
<span class="token comment">#                2 \u4E2A\u76EE\u5F55 56,677,851,136 \u53EF\u7528\u5B57\u8282</span>
</code></pre></div><ul><li>start:</li></ul><div class="language-python ext-py"><pre class="language-python"><code><span class="token comment"># \u9700\u8981\u5BFC\u5165\u6A21\u5757: import subprocess [as \u522B\u540D]</span>
<span class="token comment"># \u6216\u8005: from subprocess import Popen [as \u522B\u540D]</span>
<span class="token keyword">def</span> <span class="token function">start</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>command <span class="token operator">=</span> <span class="token string">&quot;%s %s -%c -R %s -s %d&quot;</span> <span class="token operator">%</span> \\
                <span class="token punctuation">(</span>
                    INJECTOR<span class="token punctuation">,</span>
                    <span class="token string">&quot; &quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    self<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>synth_mode<span class="token punctuation">,</span>
                    <span class="token string">&quot;-0&quot;</span> <span class="token keyword">if</span> self<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>root <span class="token keyword">else</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span>
                    self<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>seed
                <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>process <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>
            <span class="token string">&quot;exec %s&quot;</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>command<span class="token punctuation">,</span>
            shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>
            stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>
            stdin<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>
            preexec_fn<span class="token operator">=</span>os<span class="token punctuation">.</span>setsid
            <span class="token punctuation">)</span> 
</code></pre></div><p>_run_command:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token comment"># \u9700\u8981\u5BFC\u5165\u6A21\u5757: import subprocess [as \u522B\u540D]</span>
<span class="token comment"># \u6216\u8005: from subprocess import Popen [as \u522B\u540D]</span>
<span class="token keyword">def</span> <span class="token function">_run_command</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>command<span class="token punctuation">,</span>
                         stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span>
                         stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>STDOUT<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">iter</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">,</span> <span class="token string">b&#39;&#39;</span><span class="token punctuation">)</span> 
</code></pre></div>`,34);function b(h,y){const a=p("ExternalLinkIcon");return t(),o(c,null,[k,n("p",null,[i,n("a",d,[m,e(a)])]),g],64)}var _=u(r,[["render",b]]);export{_ as default};
